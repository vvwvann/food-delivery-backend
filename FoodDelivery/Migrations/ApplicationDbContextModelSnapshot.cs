// <auto-generated />
using System;
using System.Collections.Generic;
using FoodDelivery.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace FoodDelivery.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasPostgresExtension("postgis")
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("FoodDelivery.Data.Tables.AddressEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("ApartmentNumber")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("DeliveryTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("HouseNumber")
                        .HasColumnType("text");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<Point>("Location")
                        .HasColumnType("geography");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("Street")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DeliveryTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("FoodDelivery.Data.Tables.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBlock")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("ManagedRestaurantId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("Photo")
                        .HasColumnType("text");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("ManagedRestaurantId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("FoodDelivery.Data.Tables.BasketDishEntity", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<int>("DishId")
                        .HasColumnType("integer");

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "DishId");

                    b.HasIndex("DishId");

                    b.HasIndex("RestaurantId");

                    b.ToTable("BasketDishEntity");
                });

            modelBuilder.Entity("FoodDelivery.Data.Tables.ConnectionEntity", b =>
                {
                    b.Property<string>("ConnectionId")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("ConnectionId");

                    b.HasIndex("UserId");

                    b.ToTable("Connections");
                });

            modelBuilder.Entity("FoodDelivery.Data.Tables.CuisineEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Photo")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("FoodDelivery.Data.Tables.DeliveryTypeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DeliveryTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "К входу в здание"
                        });
                });

            modelBuilder.Entity("FoodDelivery.Data.Tables.DishAdditionalEntity", b =>
                {
                    b.Property<int>("AdditionalId")
                        .HasColumnType("integer");

                    b.Property<int>("DishId")
                        .HasColumnType("integer");

                    b.HasKey("AdditionalId", "DishId");

                    b.HasIndex("DishId");

                    b.ToTable("DishAdditionalEntity");
                });

            modelBuilder.Entity("FoodDelivery.Data.Tables.DishEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int?>("CuisineId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("Index")
                        .HasColumnType("integer");

                    b.Property<string>("Ingridients")
                        .HasColumnType("text");

                    b.Property<bool>("IsAdditional")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBlock")
                        .HasColumnType("boolean");

                    b.Property<int>("MenuCategoryId")
                        .HasColumnType("integer");

                    b.Property<int>("Minutes")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string[]>("Photo")
                        .HasColumnType("text[]");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CuisineId");

                    b.HasIndex("MenuCategoryId");

                    b.HasIndex("RestaurantId");

                    b.ToTable("Dishes");
                });

            modelBuilder.Entity("FoodDelivery.Data.Tables.DishTypeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DishTypes");
                });

            modelBuilder.Entity("FoodDelivery.Data.Tables.FavoriteDishEntity", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<int>("DishId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("UserId", "DishId");

                    b.HasIndex("DishId");

                    b.ToTable("FavoriteDishEntity");
                });

            modelBuilder.Entity("FoodDelivery.Data.Tables.FavoriteRestaurantEntity", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("UserId", "RestaurantId");

                    b.HasIndex("RestaurantId");

                    b.ToTable("FavoriteEntity");
                });

            modelBuilder.Entity("FoodDelivery.Data.Tables.HomePromotionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Photo")
                        .HasColumnType("text");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("HomePromotions");
                });

            modelBuilder.Entity("FoodDelivery.Data.Tables.MenuCategoryEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.ToTable("MenuCategories");
                });

            modelBuilder.Entity("FoodDelivery.Data.Tables.OrderDeliveryTypeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("OrderDeliveryTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Курьером"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Самовывоз"
                        });
                });

            modelBuilder.Entity("FoodDelivery.Data.Tables.OrderDishEntity", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("integer");

                    b.Property<int>("DishId")
                        .HasColumnType("integer");

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.Property<List<string>>("Description")
                        .HasColumnType("text[]");

                    b.Property<decimal>("Sum")
                        .HasColumnType("numeric");

                    b.HasKey("OrderId", "DishId");

                    b.HasIndex("DishId");

                    b.ToTable("OrderDishEntity");
                });

            modelBuilder.Entity("FoodDelivery.Data.Tables.OrderEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("AddressId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DeliveryMinutes")
                        .HasColumnType("integer");

                    b.Property<decimal>("DeliverySum")
                        .HasColumnType("numeric");

                    b.Property<int>("DeliveryTypeId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("boolean");

                    b.Property<string>("ManagerId")
                        .HasColumnType("text");

                    b.Property<int?>("OrderDeliveryTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("PaymentTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("integer");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Sum")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Tip")
                        .HasColumnType("numeric");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("OrderDeliveryTypeId");

                    b.HasIndex("PaymentTypeId");

                    b.HasIndex("RestaurantId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UserId");

                    b.ToTable("OrderEntity");
                });

            modelBuilder.Entity("FoodDelivery.Data.Tables.OrderPaymentTypeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("OrderPaymentTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Наличными"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Банковской картой"
                        });
                });

            modelBuilder.Entity("FoodDelivery.Data.Tables.OrderStatusEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("OrderStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Новый"
                        },
                        new
                        {
                            Id = 2,
                            Description = "В обработке"
                        },
                        new
                        {
                            Id = 3,
                            Description = "У курьера"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Исполнен"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Отменён"
                        });
                });

            modelBuilder.Entity("FoodDelivery.Data.Tables.PromotionDishEntity", b =>
                {
                    b.Property<int>("DishId")
                        .HasColumnType("integer");

                    b.Property<int>("PromotionId")
                        .HasColumnType("integer");

                    b.Property<int?>("Count")
                        .HasColumnType("integer");

                    b.Property<DateTime>("From")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double>("Percent")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("To")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("DishId", "PromotionId");

                    b.HasIndex("PromotionId");

                    b.ToTable("PromotionDishEntity");
                });

            modelBuilder.Entity("FoodDelivery.Data.Tables.PromotionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Promotions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Скидка в зависимости от суммы заказа"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Бесплатная доставка в зависимости от суммы заказа"
                        },
                        new
                        {
                            Id = 3,
                            Name = "При заказе нескольких порций"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Акция для блюда"
                        });
                });

            modelBuilder.Entity("FoodDelivery.Data.Tables.PromotionRestaurantEntity", b =>
                {
                    b.Property<int>("RestaurantId")
                        .HasColumnType("integer");

                    b.Property<int>("PromotionId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("From")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal>("MinValue")
                        .HasColumnType("numeric");

                    b.Property<double>("Percent")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("To")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("RestaurantId", "PromotionId");

                    b.HasIndex("PromotionId");

                    b.ToTable("PromotionRestaurantEntity");
                });

            modelBuilder.Entity("FoodDelivery.Data.Tables.Reference.NewsEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.HasKey("Id");

                    b.ToTable("News");
                });

            modelBuilder.Entity("FoodDelivery.Data.Tables.Reference.SettingsEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Info")
                        .HasColumnType("text");

                    b.Property<double>("Value")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("FoodDelivery.Data.Tables.RestaurantDeliveryEntity", b =>
                {
                    b.Property<int>("RestaurantId")
                        .HasColumnType("integer");

                    b.Property<int>("DeliveryId")
                        .HasColumnType("integer");

                    b.HasKey("RestaurantId", "DeliveryId");

                    b.HasIndex("DeliveryId");

                    b.ToTable("RestaurantDeliveryEntity");
                });

            modelBuilder.Entity("FoodDelivery.Data.Tables.RestaurantEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("AddressId")
                        .HasColumnType("integer");

                    b.Property<string>("Category")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Delivery")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("FreeDelivery")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBlock")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNew")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPopular")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string[]>("Photo")
                        .HasColumnType("text[]");

                    b.Property<int>("PriceFrom")
                        .HasColumnType("integer");

                    b.Property<int>("PriceTo")
                        .HasColumnType("integer");

                    b.Property<double>("Rating")
                        .HasColumnType("double precision");

                    b.Property<int?>("RestaurantEntityId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ScheduleFrom")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("ScheduleTo")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("RestaurantEntityId");

                    b.ToTable("Restaurants");
                });

            modelBuilder.Entity("FoodDelivery.Data.Tables.RestaurantСuisineEntity", b =>
                {
                    b.Property<int>("RestaurantId")
                        .HasColumnType("integer");

                    b.Property<int>("CuisineId")
                        .HasColumnType("integer");

                    b.HasKey("RestaurantId", "CuisineId");

                    b.HasIndex("CuisineId");

                    b.ToTable("RestaurantСuisineEntity");
                });

            modelBuilder.Entity("FoodDelivery.Data.Tables.ReviewEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("Rating")
                        .HasColumnType("double precision");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("FoodDelivery.Data.Tables.ReviewTagEntity", b =>
                {
                    b.Property<int>("ReviewId")
                        .HasColumnType("integer");

                    b.Property<int>("TagId")
                        .HasColumnType("integer");

                    b.HasKey("ReviewId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("ReviewTagEntity");
                });

            modelBuilder.Entity("FoodDelivery.Data.Tables.SessionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("ExpiresIn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("RefreshToken")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("FoodDelivery.Data.Tables.TagEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("FoodDelivery.Data.Tables.User.StatisticEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("OrdersCount")
                        .HasColumnType("integer");

                    b.Property<int>("RegisterCount")
                        .HasColumnType("integer");

                    b.Property<decimal>("TotalSum")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("Statistics");
                });

            modelBuilder.Entity("FoodDelivery.Data.Tables.WidgetEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Widgets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Популярные заведеня города"
                        },
                        new
                        {
                            Id = 3,
                            Name = "С бесплатной доставкой"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Новые рестораны"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Рядом с вами"
                        });
                });

            modelBuilder.Entity("FoodDelivery.Data.Tables.WidgetRestaurantEntity", b =>
                {
                    b.Property<int>("RestaurantId")
                        .HasColumnType("integer");

                    b.Property<int>("WidgetId")
                        .HasColumnType("integer");

                    b.HasKey("RestaurantId", "WidgetId");

                    b.HasIndex("WidgetId");

                    b.ToTable("WidgetRestaurantEntity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("FoodDelivery.Data.Tables.AddressEntity", b =>
                {
                    b.HasOne("FoodDelivery.Data.Tables.DeliveryTypeEntity", "DeliveryType")
                        .WithMany("Addresses")
                        .HasForeignKey("DeliveryTypeId");

                    b.HasOne("FoodDelivery.Data.Tables.ApplicationUser", "User")
                        .WithMany("Addresses")
                        .HasForeignKey("UserId");

                    b.Navigation("DeliveryType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FoodDelivery.Data.Tables.ApplicationUser", b =>
                {
                    b.HasOne("FoodDelivery.Data.Tables.RestaurantEntity", "ManagedRestaurant")
                        .WithMany("Managers")
                        .HasForeignKey("ManagedRestaurantId");

                    b.Navigation("ManagedRestaurant");
                });

            modelBuilder.Entity("FoodDelivery.Data.Tables.BasketDishEntity", b =>
                {
                    b.HasOne("FoodDelivery.Data.Tables.DishEntity", "Dish")
                        .WithMany("Baskets")
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FoodDelivery.Data.Tables.RestaurantEntity", "Restaurant")
                        .WithMany()
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodDelivery.Data.Tables.ApplicationUser", "User")
                        .WithMany("BasketDishes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Dish");

                    b.Navigation("Restaurant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FoodDelivery.Data.Tables.ConnectionEntity", b =>
                {
                    b.HasOne("FoodDelivery.Data.Tables.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FoodDelivery.Data.Tables.DishAdditionalEntity", b =>
                {
                    b.HasOne("FoodDelivery.Data.Tables.DishEntity", "Additional")
                        .WithMany("Dishes")
                        .HasForeignKey("AdditionalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FoodDelivery.Data.Tables.DishEntity", "Dish")
                        .WithMany("Additionals")
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Additional");

                    b.Navigation("Dish");
                });

            modelBuilder.Entity("FoodDelivery.Data.Tables.DishEntity", b =>
                {
                    b.HasOne("FoodDelivery.Data.Tables.CuisineEntity", "Cuisine")
                        .WithMany()
                        .HasForeignKey("CuisineId");

                    b.HasOne("FoodDelivery.Data.Tables.MenuCategoryEntity", "MenuCategory")
                        .WithMany("Dishes")
                        .HasForeignKey("MenuCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodDelivery.Data.Tables.RestaurantEntity", "Restaurant")
                        .WithMany("Dishes")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cuisine");

                    b.Navigation("MenuCategory");

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("FoodDelivery.Data.Tables.FavoriteDishEntity", b =>
                {
                    b.HasOne("FoodDelivery.Data.Tables.DishEntity", "Dish")
                        .WithMany("Favorites")
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FoodDelivery.Data.Tables.ApplicationUser", "User")
                        .WithMany("FavoriteDishes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Dish");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FoodDelivery.Data.Tables.FavoriteRestaurantEntity", b =>
                {
                    b.HasOne("FoodDelivery.Data.Tables.RestaurantEntity", "Restaurant")
                        .WithMany("Favorites")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FoodDelivery.Data.Tables.ApplicationUser", "User")
                        .WithMany("FavoriteRestaurants")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Restaurant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FoodDelivery.Data.Tables.MenuCategoryEntity", b =>
                {
                    b.HasOne("FoodDelivery.Data.Tables.RestaurantEntity", "Restaurant")
                        .WithMany("Menu")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("FoodDelivery.Data.Tables.OrderDishEntity", b =>
                {
                    b.HasOne("FoodDelivery.Data.Tables.DishEntity", "Dish")
                        .WithMany("Orders")
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FoodDelivery.Data.Tables.OrderEntity", "Order")
                        .WithMany("Dishes")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Dish");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("FoodDelivery.Data.Tables.OrderEntity", b =>
                {
                    b.HasOne("FoodDelivery.Data.Tables.AddressEntity", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodDelivery.Data.Tables.ApplicationUser", "Manager")
                        .WithMany("ManagedOrders")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FoodDelivery.Data.Tables.OrderDeliveryTypeEntity", "OrderDeliveryType")
                        .WithMany()
                        .HasForeignKey("OrderDeliveryTypeId");

                    b.HasOne("FoodDelivery.Data.Tables.OrderPaymentTypeEntity", "PaymentType")
                        .WithMany()
                        .HasForeignKey("PaymentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodDelivery.Data.Tables.RestaurantEntity", "Restaurant")
                        .WithMany()
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodDelivery.Data.Tables.OrderStatusEntity", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodDelivery.Data.Tables.ApplicationUser", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Address");

                    b.Navigation("Manager");

                    b.Navigation("OrderDeliveryType");

                    b.Navigation("PaymentType");

                    b.Navigation("Restaurant");

                    b.Navigation("Status");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FoodDelivery.Data.Tables.PromotionDishEntity", b =>
                {
                    b.HasOne("FoodDelivery.Data.Tables.DishEntity", "Dish")
                        .WithMany("Promotions")
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FoodDelivery.Data.Tables.PromotionEntity", "Promotion")
                        .WithMany("Dishes")
                        .HasForeignKey("PromotionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Dish");

                    b.Navigation("Promotion");
                });

            modelBuilder.Entity("FoodDelivery.Data.Tables.PromotionRestaurantEntity", b =>
                {
                    b.HasOne("FoodDelivery.Data.Tables.PromotionEntity", "Promotion")
                        .WithMany("Restaurants")
                        .HasForeignKey("PromotionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FoodDelivery.Data.Tables.RestaurantEntity", "Restaurant")
                        .WithMany("Promotions")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Promotion");

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("FoodDelivery.Data.Tables.RestaurantDeliveryEntity", b =>
                {
                    b.HasOne("FoodDelivery.Data.Tables.OrderDeliveryTypeEntity", "Delivery")
                        .WithMany("Restaurants")
                        .HasForeignKey("DeliveryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FoodDelivery.Data.Tables.RestaurantEntity", "Restaurant")
                        .WithMany("Deliveries")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Delivery");

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("FoodDelivery.Data.Tables.RestaurantEntity", b =>
                {
                    b.HasOne("FoodDelivery.Data.Tables.AddressEntity", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodDelivery.Data.Tables.RestaurantEntity", null)
                        .WithMany("Reviews")
                        .HasForeignKey("RestaurantEntityId");

                    b.Navigation("Address");
                });

            modelBuilder.Entity("FoodDelivery.Data.Tables.RestaurantСuisineEntity", b =>
                {
                    b.HasOne("FoodDelivery.Data.Tables.CuisineEntity", "Cuisine")
                        .WithMany("Restaurants")
                        .HasForeignKey("CuisineId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FoodDelivery.Data.Tables.RestaurantEntity", "Restaurant")
                        .WithMany("Cuisines")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Cuisine");

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("FoodDelivery.Data.Tables.ReviewEntity", b =>
                {
                    b.HasOne("FoodDelivery.Data.Tables.RestaurantEntity", "Restaurant")
                        .WithMany()
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodDelivery.Data.Tables.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Restaurant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FoodDelivery.Data.Tables.ReviewTagEntity", b =>
                {
                    b.HasOne("FoodDelivery.Data.Tables.ReviewEntity", "Review")
                        .WithMany("Tags")
                        .HasForeignKey("ReviewId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FoodDelivery.Data.Tables.TagEntity", "Tag")
                        .WithMany("Reviews")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Review");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("FoodDelivery.Data.Tables.SessionEntity", b =>
                {
                    b.HasOne("FoodDelivery.Data.Tables.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FoodDelivery.Data.Tables.WidgetRestaurantEntity", b =>
                {
                    b.HasOne("FoodDelivery.Data.Tables.RestaurantEntity", "Restaurant")
                        .WithMany("Widgets")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FoodDelivery.Data.Tables.WidgetEntity", "Widget")
                        .WithMany("Restaurants")
                        .HasForeignKey("WidgetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Restaurant");

                    b.Navigation("Widget");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("FoodDelivery.Data.Tables.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("FoodDelivery.Data.Tables.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodDelivery.Data.Tables.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("FoodDelivery.Data.Tables.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FoodDelivery.Data.Tables.ApplicationUser", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("BasketDishes");

                    b.Navigation("FavoriteDishes");

                    b.Navigation("FavoriteRestaurants");

                    b.Navigation("ManagedOrders");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("FoodDelivery.Data.Tables.CuisineEntity", b =>
                {
                    b.Navigation("Restaurants");
                });

            modelBuilder.Entity("FoodDelivery.Data.Tables.DeliveryTypeEntity", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("FoodDelivery.Data.Tables.DishEntity", b =>
                {
                    b.Navigation("Additionals");

                    b.Navigation("Baskets");

                    b.Navigation("Dishes");

                    b.Navigation("Favorites");

                    b.Navigation("Orders");

                    b.Navigation("Promotions");
                });

            modelBuilder.Entity("FoodDelivery.Data.Tables.MenuCategoryEntity", b =>
                {
                    b.Navigation("Dishes");
                });

            modelBuilder.Entity("FoodDelivery.Data.Tables.OrderDeliveryTypeEntity", b =>
                {
                    b.Navigation("Restaurants");
                });

            modelBuilder.Entity("FoodDelivery.Data.Tables.OrderEntity", b =>
                {
                    b.Navigation("Dishes");
                });

            modelBuilder.Entity("FoodDelivery.Data.Tables.PromotionEntity", b =>
                {
                    b.Navigation("Dishes");

                    b.Navigation("Restaurants");
                });

            modelBuilder.Entity("FoodDelivery.Data.Tables.RestaurantEntity", b =>
                {
                    b.Navigation("Cuisines");

                    b.Navigation("Deliveries");

                    b.Navigation("Dishes");

                    b.Navigation("Favorites");

                    b.Navigation("Managers");

                    b.Navigation("Menu");

                    b.Navigation("Promotions");

                    b.Navigation("Reviews");

                    b.Navigation("Widgets");
                });

            modelBuilder.Entity("FoodDelivery.Data.Tables.ReviewEntity", b =>
                {
                    b.Navigation("Tags");
                });

            modelBuilder.Entity("FoodDelivery.Data.Tables.TagEntity", b =>
                {
                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("FoodDelivery.Data.Tables.WidgetEntity", b =>
                {
                    b.Navigation("Restaurants");
                });
#pragma warning restore 612, 618
        }
    }
}
